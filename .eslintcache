[{"/media/tiennd/Ubuntu/folder/whiteboard/src/index.js":"1","/media/tiennd/Ubuntu/folder/whiteboard/src/App.js":"2","/media/tiennd/Ubuntu/folder/whiteboard/src/reportWebVitals.js":"3","/media/tiennd/Ubuntu/folder/whiteboard/src/whiteboard/Board.js":"4"},{"size":569,"mtime":1607587273746,"results":"5","hashOfConfig":"6"},{"size":528,"mtime":1607393534733,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1607393534733,"results":"8","hashOfConfig":"6"},{"size":29511,"mtime":1607931667510,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1fbpvkb",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/media/tiennd/Ubuntu/folder/whiteboard/src/index.js",[],["20","21"],"/media/tiennd/Ubuntu/folder/whiteboard/src/App.js",[],"/media/tiennd/Ubuntu/folder/whiteboard/src/reportWebVitals.js",[],"/media/tiennd/Ubuntu/folder/whiteboard/src/whiteboard/Board.js",["22"],"\nimport React, { useRef, useEffect } from 'react'\nimport io from 'socket.io-client';\nimport '../styles/board.css'\n\nfunction Board() {\n    const canvasRef = useRef(null);\n    // const colorsRef = useRef(null);\n    const socketRef = useRef();\n    const roomName = window.location.pathname.substr(1);\n    \n    useEffect(() => {\n        let colorPre = 'black';\n        let lineWidth = 2;\n        // var history = []\n        const idUser = new Date().getTime();\n\n        // --------------- getContext() method returns a drawing context on the canvas-----\n\n        const canvas = canvasRef.current;\n        const context = canvas.getContext('2d');\n        let erasering = false;\n        let rectangleBool = false;\n        let lineBool = false;\n        let circleBool = false;\n\n        // ----------------------- Colors --------------------------------------------------\n\n        const colors = document.getElementsByClassName('color');\n        // set the current color\n        // type = 0 -> draw, type = 1 -> rectagle, type = 2 -> line, type = 3 cricle\n        const current = {\n            color: 'black',\n            lineWidth: 2,\n            type: 0\n        };\n\n        // helper that will update the current color\n        const onColorUpdate = (e) => {\n            if (!erasering) current.color = e.target.className.split(' ')[1];\n        };\n\n        const setColor = (e) => {\n            if (!erasering) current.color = e.target.value;\n        }\n\n        document.getElementById('inputColor').addEventListener('change', setColor, false);\n\n        // loop through the color elements and add the click event listeners\n        for (let i = 0; i < colors.length; i++) {\n            colors[i].addEventListener('click', onColorUpdate, false);\n        }\n        let drawing = false;\n\n        // ------------------------------- game ox ---------------------------------------\n\n        const initGame = () => {\n            if (erasering) return;\n            for (let i = 0; i < 20; i++) {\n                draw(150, 150 + i * 40, 1000, 150 + i * 40, current.color, current.lineWidth, current.type, true);\n                draw(190 + i * 40, 110, 190 + i * 40, 950, current.color, current.lineWidth, current.type, true);\n            }\n        }\n        document.getElementById(\"gameOX\").addEventListener('click', initGame, false);\n\n        // ------------------------------- set linewidth ---------------------------------------\n\n        const initLineWidth = (e) => {\n            current.lineWidth = e.target.value;\n        }\n        document.getElementById(\"inputLineWidth\").addEventListener('change', initLineWidth, false);\n\n        // ------------------------------- eraser ---------------------------------------\n\n        const eraserFunc = (e) => {\n            erasering = !erasering;\n            if (erasering) {\n                colorPre = current.color\n                lineWidth = current.lineWidth\n                current.color = 'white';\n                current.lineWidth = 20;\n                document.getElementById(\"eraserId\").style.backgroundColor = 'rgb(243, 199, 116)'\n                document.getElementById(\"whiteboardId\").style.cursor = 'not-allowed'\n            } else {\n                current.color = colorPre\n                current.lineWidth = lineWidth\n                document.getElementById(\"eraserId\").style.backgroundColor = null\n                document.getElementById(\"whiteboardId\").style.cursor = 'default'\n            }\n        }\n        document.getElementById(\"eraser\").addEventListener('click', eraserFunc, false);\n\n        // ------------------------------- rectangle ---------------------------------------\n\n        const rectangleFunc = (e) => {\n            rectangleBool = !rectangleBool;\n            if (rectangleBool && !erasering && (current.type === 0)) {\n                current.type = 1;\n                document.getElementById(\"rectangleId\").style.backgroundColor = 'rgb(243, 199, 116)'\n            } else {\n                rectangleBool = false;\n                if (current.type === 1) current.type = 0;\n                document.getElementById(\"rectangleId\").style.backgroundColor = null\n            }\n        }\n        document.getElementById(\"rectangle\").addEventListener('click', rectangleFunc, false);\n\n        // ------------------------------- line ---------------------------------------\n\n        const lineFunc = (e) => {\n            lineBool = !lineBool;\n            if (lineBool && !erasering && (current.type === 0)) {\n                current.type = 2;\n                document.getElementById(\"lineId\").style.backgroundColor = 'rgb(243, 199, 116)'\n            } else {\n                if (current.type === 2) current.type = 0;\n                lineBool = false;\n                document.getElementById(\"lineId\").style.backgroundColor = null\n            }\n        }\n        document.getElementById(\"line\").addEventListener('click', lineFunc, false);\n\n        // ------------------------------- circle ---------------------------------------\n\n        const circleFunc = (e) => {\n            circleBool = !circleBool;\n            if (circleBool && !erasering && (current.type === 0)) {\n                current.type = 3;\n                document.getElementById(\"circleId\").style.backgroundColor = 'rgb(243, 199, 116)'\n            } else {\n                if (current.type === 3) current.type = 0;\n                circleBool = false;\n                document.getElementById(\"circleId\").style.backgroundColor = null\n            }\n        }\n        document.getElementById(\"circle\").addEventListener('click', circleFunc, false);\n\n        // ------------------------------- undo ---------------------------------------\n        const undoFunc = (e) => {\n            if (!erasering) {\n                socketRef.current.emit('undoCavas', {roomName: roomName});\n                // if(history.length > 1){\n                //     history.pop();\n                //     socketRef.current.emit('undoCavas', history[history.length - 1]);\n                // }\n            }\n        }\n        document.getElementById(\"undo\").addEventListener('click', undoFunc, false);\n\n        // ------------------------------- clearFile ---------------------------------------\n        const clearFunc = (e) => {\n            socketRef.current.emit('clearCanvas', {roomName: roomName, data: null});\n        }\n        document.getElementById(\"clearFile\").addEventListener('click', clearFunc, false);\n\n        let lineWidthSelected = false;\n        // ------------------------------- selectLineWidth ---------------------------------------\n        const inputLineWidthFunc = (e) => {\n            lineWidthSelected = !lineWidthSelected;\n            if (lineWidthSelected) document.getElementById(\"inputLineWidth\").style.display = 'block';\n            else document.getElementById(\"inputLineWidth\").style.display = 'none';\n        }\n        document.getElementById(\"selectLineWidth\").addEventListener('click', inputLineWidthFunc, false);\n\n        // ------------------------------- export canvas ---------------------------------------\n        let exportCanvasChk = false;\n        const exportCanvasFunc = (e) => {\n            exportCanvasChk = !exportCanvasChk;\n            // var lnk = document.createElement('a');\n            // lnk.download = \"tiennd.png\";\n            // lnk.href = canvas.toDataURL(\"image/png;base64\");\n            // lnk.click();\n            if (exportCanvasChk) document.getElementById(\"fileNameId\").style.display = 'block';\n            else document.getElementById(\"fileNameId\").style.display = 'none';\n        }\n        document.getElementById(\"exportCanvasToImage\").addEventListener('click', exportCanvasFunc, false);\n\n        let fileName = \"\";\n        // ------------------------------ input fileName -----------------------------\n        const fileNameFunc = (e) => {\n            fileName = e.target.value;\n            var lnk = document.createElement('a');\n            lnk.download = fileName + \".png\";\n            lnk.href = canvas.toDataURL(\"image/png;base64\");\n            lnk.click();\n        }\n        document.getElementById(\"fileNameId\").addEventListener('change', fileNameFunc, false);\n\n\n        // ------------------------------- import Image -------------------------------\n        const uploadImageFunc = (e) => {\n            document.getElementById(\"inputImage\").click();\n        }\n\n        document.getElementById(\"uploadImage\").addEventListener('click', uploadImageFunc, false);\n\n        const selectImageFunc = (e) => {\n            if (e.target.files.length === 0) return;\n            var reader = new FileReader();\n            reader.readAsDataURL(e.target.files[0]);\n            reader.onload = function (event) {\n                var img = new Image();\n                img.onload = function () {\n                    context.drawImage(img, current.x, current.y);\n                    socketRef.current.emit('clearCanvas', {roomName: roomName, data: canvas.toDataURL()});\n                }\n                img.src = event.target.result;\n            }\n        }\n        document.getElementById(\"inputImage\").addEventListener('change', selectImageFunc, false);\n        // ------------------------------- create the draw ----------------------------\n\n        const draw = (x0, y0, x1, y1, color, lineWidth, type, roomName, emit) => {\n            // console.log(roomName);\n            context.beginPath();\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n            context.strokeStyle = color;\n            context.lineWidth = lineWidth;\n            context.stroke();\n            context.closePath();\n\n            if (!emit) {\n                // history.push(canvas.toDataURL());\n                // if(!drawing) history.pop();\n                return;\n            }\n            const w = canvas.width;\n            const h = canvas.height;\n\n            socketRef.current.emit('drawing', {\n                x0: x0 / w,\n                y0: y0 / h,\n                x1: x1 / w,\n                y1: y1 / h,\n                color,\n                lineWidth,\n                type,\n                roomName\n            });\n        };\n\n        // ------------------------------- create the fillRect ----------------------------\n        const drawRect = (x0, y0, width, height, color, lineWidth, type, roomName, emit) => {\n            context.beginPath();\n            context.strokeStyle = color;\n            context.lineWidth = lineWidth;\n            context.rect(x0, y0, width, height);\n            context.stroke();\n            context.closePath();\n\n            if (!emit) {\n                // history.push(canvas.toDataURL());\n                // if(!drawing) history.pop();\n                return;\n            }\n            const w = canvas.width;\n            const h = canvas.height;\n\n            socketRef.current.emit('drawing', {\n                x0: x0 / w,\n                y0: y0 / h,\n                x1: width / w,\n                y1: height / h,\n                color,\n                lineWidth,\n                type,\n                roomName\n            });\n        };\n\n        // ------------------------------- create the drawLine ----------------------------\n        const drawLine = (x0, y0, x1, y1, color, lineWidth, type, emit) => {\n            context.beginPath();\n            context.strokeStyle = color;\n            context.lineWidth = lineWidth;\n            context.moveTo(x0, y0);\n            context.lineTo(x1, y1);\n            context.stroke();\n            context.closePath();\n\n            if (!emit) {\n                // history.push(canvas.toDataURL());\n                // if(!drawing) history.pop();\n                return;\n            }\n            const w = canvas.width;\n            const h = canvas.height;\n\n            socketRef.current.emit('drawing', {\n                x0: x0 / w,\n                y0: y0 / h,\n                x1: x1 / w,\n                y1: y1 / h,\n                color,\n                lineWidth,\n                type,\n                roomName\n            });\n        };\n\n        // ------------------------------- create the fillCircle ----------------------------\n\n        const drawCircle = (x0, y0, x1, y1, color, lineWidth, type, emit) => {\n            let r = Math.sqrt(Math.pow(x1-x0, 2) + Math.pow(y1-y0, 2));\n            context.beginPath();\n            context.strokeStyle = color;\n            context.lineWidth = lineWidth;\n            context.arc(x0, y0, r, 0, 2 * Math.PI);\n            context.stroke();\n            context.closePath();\n\n            if (!emit) {\n                // history.push(canvas.toDataURL());\n                // if(!drawing) history.pop();\n                return;\n            }\n            const w = canvas.width;\n            const h = canvas.height;\n\n            socketRef.current.emit('drawing', {\n                x0: x0 / w,\n                y0: y0 / h,\n                x1: x1 / w,\n                y1: y1 / h,\n                color,\n                lineWidth,\n                type,\n                roomName\n            });\n        };\n\n        // ---------------- mouse movement --------------------------------------\n\n        const onMouseDown = (e) => {\n            if (e.clientX === 0 || e.clientY === 0) return;\n            drawing = true;\n            // history.push(canvas.toDataURL());\n            current.x = e.clientX || e.touches[0].clientX;\n            current.y = e.clientY || e.touches[0].clientY;\n        };\n\n        const onMouseMove = (e) => {\n            if (!drawing) { return; }\n            if (e.clientX === 0 || e.clientY === 0) return;\n            switch (current.type) {\n                case 0: {\n                    draw(current.x, current.y, e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY, current.color, current.lineWidth, current.type, roomName, true);\n                    current.x = e.clientX || e.touches[0].clientX;\n                    current.y = e.clientY || e.touches[0].clientY;\n                    break\n                }\n                default: {\n                    break\n                }\n            }\n        };\n\n        const onMouseUp = (e) => {\n            if (!drawing) { return; }\n            if (e.clientX === 0 || e.clientY === 0) return;\n            if ((e.type === \"touchcancel\" || e.type === \"touchend\") && e.touches[0] === undefined) {\n                return;\n            }\n            drawing = false;\n            // history.push(canvas.toDataURL());\n            // draw(current.x, current.y, e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY, current.color, current.lineWidth, true);\n            switch (current.type) {\n                case 0: {\n                    draw(current.x, current.y, e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY, current.color, current.lineWidth, current.type, roomName, true);\n                    break\n                }\n                case 1: {\n                    drawRect(current.x, current.y, Math.abs((e.clientX || e.touches[0].clientX) - current.x), Math.abs((e.clientY || e.touches[0].clientY) - current.y), current.color, current.lineWidth, current.type, roomName, true);\n                    break\n                }\n                case 2: {\n                    drawLine(current.x, current.y, e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY, current.color, current.lineWidth, current.type, roomName, true);\n                    break\n                }\n                case 3: {\n                    drawCircle(current.x, current.y, e.clientX || e.touches[0].clientX, e.clientY || e.touches[0].clientY, current.color, current.lineWidth, current.type, roomName, true);\n                    break\n                }\n                default: {\n                    break\n                }\n            }\n            socketRef.current.emit('updateCanvas', {roomName: roomName, data: canvas.toDataURL()});\n        };\n\n        // ----------- limit the number of events per second -----------------------\n\n        const throttle = (callback, delay) => {\n            let previousCall = new Date().getTime();\n            return function () {\n                const time = new Date().getTime();\n\n                if ((time - previousCall) >= delay) {\n                    previousCall = time;\n                    callback.apply(null, arguments);\n                }\n            };\n        };\n\n        // -----------------add event listeners to our canvas ----------------------\n\n        canvas.addEventListener('mousedown', onMouseDown, false);\n        canvas.addEventListener('mouseup', onMouseUp, false);\n        canvas.addEventListener('mouseout', onMouseUp, false);\n        canvas.addEventListener('mousemove', throttle(onMouseMove, 10), false);\n\n        // Touch support for mobile devices\n        canvas.addEventListener('touchstart', onMouseDown, false);\n        canvas.addEventListener('touchend', onMouseUp, false);\n        canvas.addEventListener('touchcancel', onMouseUp, false);\n        canvas.addEventListener('touchmove', throttle(onMouseMove, 10), false);\n\n        // -------------- make the canvas fill its parent component -----------------\n\n        const onResize = () => {\n            canvas.width = window.innerWidth;\n            canvas.height = window.innerHeight;\n        };\n\n        // window.addEventListener('resize', onResize, false);\n        onResize();\n\n        // ----------------------- socket.io connection ----------------------------\n        const onDrawingEvent = (data) => {\n            const w = canvas.width;\n            const h = canvas.height;\n            switch (data.type) {\n                case 0: {\n                    draw(data.x0 * w, data.y0 * h, data.x1 * w, data.y1 * h, data.color, data.lineWidth, data.type);\n                    break;\n                }\n                case 1: {\n                    drawRect(data.x0 * w, data.y0 * h, data.x1 * w, data.y1 * h, data.color, data.lineWidth, data.type);\n                    break;\n                }\n                case 2: {\n                    drawLine(data.x0 * w, data.y0 * h, data.x1 * w, data.y1 * h, data.color, data.lineWidth, data.type);\n                    break;\n                }\n                case 3: {\n                    drawCircle(data.x0 * w, data.y0 * h, data.x1 * w, data.y1 * h, data.color, data.lineWidth, data.type);\n                    break;\n                }\n                default: {\n                    break\n                }\n            }\n        }\n        socketRef.current = io.connect('http://192.168.0.38:9700/whiteboard');\n        socketRef.current.emit('newConnect', {id: idUser, roomName: roomName});\n        socketRef.current.on('drawing', onDrawingEvent);\n\n        const onDrawingCanvasPre = (data) => {\n            // console.log(idUser);\n            var img = new Image();\n            img.src = data;\n            // history.push(data);\n            img.onload = function () {\n                context.drawImage(img, 0, 0)\n            }\n        }\n\n        socketRef.current.on('newConnected', onDrawingCanvasPre);\n\n        const undoDrawingFunc = (data) => {\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var img = new Image();\n            img.src = data;\n\n            img.onload = function () {\n                context.drawImage(img, 0, 0)\n            }\n        }\n\n        socketRef.current.on('undoDrawing', undoDrawingFunc);\n\n        const clearCanvasFunc = (data) => {\n            context.clearRect(0, 0, canvas.width, canvas.height);\n            var img = new Image();\n            img.src = data;\n            img.onload = function () {\n                context.drawImage(img, 0, 0)\n            }\n        }\n\n        socketRef.current.on('clearCanvas', clearCanvasFunc);\n\n    }, []);\n    return (\n        <div>\n            <canvas ref={canvasRef} className=\"whiteboard\" id=\"whiteboardId\" />\n\n            <div className=\"colors\">\n                {/* <div className=\"d-flex flex-wrap\" ref={colorsRef}>\n                    <div className=\"color black\" />\n                    <div className=\"color red\" />\n                    <div className=\"color green\" />\n                    <div className=\"color blue\" />\n                </div> */}\n                <div className=\"inputColorPicker\">\n                    <input type=\"color\" id=\"inputColor\" />\n                </div>\n                <div className=\"inputColorPicker\">\n                    <div className=\"d-flex align-items-center\">\n                        {/* <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-pencil-fill\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path fillRule=\"evenodd\" d=\"M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708l-3-3zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207l6.5-6.5zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.499.499 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11l.178-.178z\" />\n                        </svg> */}\n                        <svg id=\"selectLineWidth\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-pencil-square\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                            <path d=\"M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456l-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z\" />\n                            <path fillRule=\"evenodd\" d=\"M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z\" />\n                        </svg>\n                        <select className=\"select\" id=\"inputLineWidth\">\n                            <option value=\"2\">2</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"6\">6</option>\n                        </select>\n                    </div>\n                </div>\n                <div className=\"inputColorPicker\" id=\"gameOX\">\n                    <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-controller\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M11.119 2.693c.904.19 1.75.495 2.235.98.407.408.779 1.05 1.094 1.772.32.733.599 1.591.805 2.466.206.875.34 1.78.364 2.606.024.815-.059 1.602-.328 2.21a1.42 1.42 0 0 1-1.445.83c-.636-.067-1.115-.394-1.513-.773a11.307 11.307 0 0 1-.739-.809c-.126-.147-.25-.291-.368-.422-.728-.804-1.597-1.527-3.224-1.527-1.627 0-2.496.723-3.224 1.527-.119.131-.242.275-.368.422-.243.283-.494.576-.739.81-.398.378-.877.705-1.513.772a1.42 1.42 0 0 1-1.445-.83c-.27-.608-.352-1.395-.329-2.21.024-.826.16-1.73.365-2.606.206-.875.486-1.733.805-2.466.315-.722.687-1.364 1.094-1.772.486-.485 1.331-.79 2.235-.98.932-.196 2.03-.292 3.119-.292 1.089 0 2.187.096 3.119.292zm-6.032.979c-.877.185-1.469.443-1.733.708-.276.276-.587.783-.885 1.465a13.748 13.748 0 0 0-.748 2.295 12.351 12.351 0 0 0-.339 2.406c-.022.755.062 1.368.243 1.776a.42.42 0 0 0 .426.24c.327-.034.61-.199.929-.502.212-.202.4-.423.615-.674.133-.156.276-.323.44-.505C4.861 9.97 5.978 9.026 8 9.026s3.139.943 3.965 1.855c.164.182.307.35.44.505.214.25.403.472.615.674.318.303.601.468.929.503a.42.42 0 0 0 .426-.241c.18-.408.265-1.02.243-1.776a12.354 12.354 0 0 0-.339-2.406 13.753 13.753 0 0 0-.748-2.295c-.298-.682-.61-1.19-.885-1.465-.264-.265-.856-.523-1.733-.708-.85-.179-1.877-.27-2.913-.27-1.036 0-2.063.091-2.913.27z\" />\n                        <path d=\"M11.5 6.026a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm2 0a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-1 1a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm-7-2.5h1v3h-1v-3z\" />\n                        <path d=\"M3.5 6.526h3v1h-3v-1zM3.051 3.26a.5.5 0 0 1 .354-.613l1.932-.518a.5.5 0 0 1 .258.966l-1.932.518a.5.5 0 0 1-.612-.354zm9.976 0a.5.5 0 0 0-.353-.613l-1.932-.518a.5.5 0 1 0-.259.966l1.932.518a.5.5 0 0 0 .612-.354z\" />\n                    </svg>\n                </div>\n                <div className=\"styleClass\" id=\"eraser\">\n                    <svg id=\"eraserId\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-trash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\n                        <path fillRule=\"evenodd\" d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4L4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\" />\n                    </svg>\n                </div>\n                <div className=\"styleClass\" id=\"undo\">\n                    <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-arrow-counterclockwise\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M8 3a5 5 0 1 1-4.546 2.914.5.5 0 0 0-.908-.417A6 6 0 1 0 8 2v1z\" />\n                        <path d=\"M8 4.466V.534a.25.25 0 0 0-.41-.192L5.23 2.308a.25.25 0 0 0 0 .384l2.36 1.966A.25.25 0 0 0 8 4.466z\" />\n                    </svg>\n                </div>\n                <div className=\"styleClass\" id=\"rectangle\">\n                    <svg id=\"rectangleId\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-square\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M14 1H2a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1zM2 0a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V2a2 2 0 0 0-2-2H2z\" />\n                    </svg>\n                </div>\n                <div className=\"styleClass\" id=\"line\">\n                    <svg id=\"lineId\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-slash\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M11.354 4.646a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708l6-6a.5.5 0 0 1 .708 0z\" />\n                    </svg>\n                </div>\n                <div className=\"styleClass\" id=\"circle\">\n                    <svg id=\"circleId\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-circle\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path fillRule=\"evenodd\" d=\"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z\" />\n                    </svg>\n                </div>\n                <div className=\"styleClass\" id=\"clearFile\">\n                    <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-file-earmark\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M4 0h5.5v1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h1V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2z\" />\n                        <path d=\"M9.5 3V0L14 4.5h-3A1.5 1.5 0 0 1 9.5 3z\" />\n                    </svg>\n                </div>\n                <div className=\"styleClass d-flex\" id=\"uploadImage\">\n                    <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-file-earmark-arrow-up\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M4 0h5.5v1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h1V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2z\" />\n                        <path d=\"M9.5 3V0L14 4.5h-3A1.5 1.5 0 0 1 9.5 3z\" />\n                        <path fillRule=\"evenodd\" d=\"M8 12a.5.5 0 0 0 .5-.5V7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-2-2a.5.5 0 0 0-.708 0l-2 2a.5.5 0 1 0 .708.708L7.5 7.707V11.5a.5.5 0 0 0 .5.5z\" />\n                    </svg>\n                    <input id=\"inputImage\" className=\"inputImage\" type=\"file\" hidden />\n                </div>\n                <div className=\"styleClass d-flex align-items-center\">\n                    <svg id=\"exportCanvasToImage\" width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-file-earmark-arrow-down\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M4 0h5.5v1H4a1 1 0 0 0-1 1v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1V4.5h1V14a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2z\" />\n                        <path d=\"M9.5 3V0L14 4.5h-3A1.5 1.5 0 0 1 9.5 3z\" />\n                        <path fillRule=\"evenodd\" d=\"M8 6a.5.5 0 0 1 .5.5v3.793l1.146-1.147a.5.5 0 0 1 .708.708l-2 2a.5.5 0 0 1-.708 0l-2-2a.5.5 0 1 1 .708-.708L7.5 10.293V6.5A.5.5 0 0 1 8 6z\" />\n                    </svg>\n                    <input id=\"fileNameId\" className=\"inputFileName\" type=\"text\" placeholder=\"File name\" />\n                </div>\n                <div className=\"styleClass\">\n                    <svg width=\"2em\" height=\"2em\" viewBox=\"0 0 16 16\" className=\"bi bi-fonts\" fill=\"currentColor\" xmlns=\"http://www.w3.org/2000/svg\">\n                        <path d=\"M12.258 3H3.747l-.082 2.46h.479c.26-1.544.758-1.783 2.693-1.845l.424-.013v7.827c0 .663-.144.82-1.3.923v.52h4.082v-.52c-1.162-.103-1.306-.26-1.306-.923V3.602l.43.013c1.935.062 2.434.301 2.694 1.846h.479L12.258 3z\" />\n                    </svg>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Board",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":494,"column":8,"nodeType":"29","endLine":494,"endColumn":10,"suggestions":"30"},"no-native-reassign",["31"],"no-negated-in-lhs",["32"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'roomName'. Either include it or remove the dependency array.","ArrayExpression",["33"],"no-global-assign","no-unsafe-negation",{"desc":"34","fix":"35"},"Update the dependencies array to be: [roomName]",{"range":"36","text":"37"},[19654,19656],"[roomName]"]